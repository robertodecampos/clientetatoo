; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Cliente Tatoo"
#define MyAppVersion "1.0.0.0"
#define MyAppExeName "ClienteTatoo.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{C1070B36-3218-4C53-B06D-F93DB520D3BE}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
DefaultDirName={pf}\{#MyAppName}
DisableProgramGroupPage=yes
OutputDir=C:\Users\rober\OneDrive\Documentos\Projetos\C#\Cliente Tatoo\setup
OutputBaseFilename=Instalador Cliente Tatoo
Password=cli@tatoo2019
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin

[Languages]
Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "..\bin\Release\ClienteTatoo.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\bin\Release\ClienteTatoo.pdb"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\bin\Release\EntityFramework.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\bin\Release\EntityFramework.SqlServer.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\bin\Release\Google.Protobuf.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\bin\Release\System.Data.SQLite.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\bin\Release\System.Data.SQLite.EF6.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\bin\Release\System.Data.SQLite.Linq.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\DataBase\clientetatoo.db"; DestDir: "{commonappdata}\Cliente Tatoo"; Flags: ignoreversion onlyifdoesntexist;
Source: "..\DataBase\enderecamento.db"; DestDir: "{commonappdata}\Cliente Tatoo"; Flags: ignoreversion
Source: "..\bin\Release\x64\SQLite.Interop.dll"; DestDir: "{app}\x64"; Flags: ignoreversion
Source: "..\bin\Release\x86\SQLite.Interop.dll"; DestDir: "{app}\x86"; Flags: ignoreversion
Source: "sqlite3.exe"; DestDir: "{tmp}"; Flags: ignoreversion;
Source: "netframework_4_6_1.exe"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall; AfterInstall: InstallNetFramework; Check: NetFrameworkIsNotInstalled
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: runascurrentuser nowait postinstall skipifsilent
Filename: "{tmp}\sqlite3.exe"; Parameters: """{commonappdata}\Cliente Tatoo\clientetatoo.db"" ""DELETE FROM usuario;INSERT INTO usuario (login, senha) VALUES('{code:GetUsuario}', '{code:GetSenha}')"""; Flags: runascurrentuser runhidden; StatusMsg: "Aplicando usuário e senha..."

[Code]
var
  usuario, senha: String;
  userAndPasswordDefined, successfullyInstalled: Boolean;
  beforePage: Integer;

function GetUsuario(Param: string): String;
begin
  Result := usuario;
end;

function GetSenha(Param: string): String;
begin
  Result := GetMD5OfString(senha);
end;

procedure buttonOkClick(Sender: TObject);
var
  frmConfigUserAndPassword: TSetupForm;
  editUsuario: TEdit;
  editSenha, editConfirmacaoSenha: TPasswordEdit;
begin
  frmConfigUserAndPassword := TSetupForm(TButton(Sender).Parent);
  editUsuario := TEdit(frmConfigUserAndPassword.FindComponent('edtUsuario'));
  editSenha := TPasswordEdit(frmConfigUserAndPassword.FindComponent('edtSenha'));
  editConfirmacaoSenha := TPasswordEdit(frmConfigUserAndPassword.FindComponent('edtConfirmacaoSenha'));

  if (Trim(editUsuario.Text) = '') then
    begin
      SuppressibleMsgBox('Informe o usuário!', mbError, MB_OK, MB_OK);
      Exit;
    end;

  if (Trim(editSenha.Text) = '') then
    begin
      SuppressibleMsgBox('Informe a senha!', mbError, MB_OK, MB_OK);
      Exit;
    end;

  if (Trim(editConfirmacaoSenha.Text) <> Trim(editSenha.Text)) then
    begin
      SuppressibleMsgBox('As senhas não coincidem!', mbError, MB_OK, MB_OK);
      Exit;
    end;

  usuario := editUsuario.Text;
  senha := editSenha.Text;

  userAndPasswordDefined := True;
  frmConfigUserAndPassword.Close();
end;

procedure ShowConfigUserAndPassword();
var
  frmConfigUserAndPassword: TSetupForm;
  labelDescricao, labelUsuario, labelSenha, labelConfirmacaoSenha: TLabel;
  editUsuario: TEdit;
  editSenha, editConfirmacaoSenha: TPasswordEdit;
  buttonOk: TButton;
begin
  if (userAndPasswordDefined) then
    Exit;

  frmConfigUserAndPassword := CreateCustomForm();    
  frmConfigUserAndPassword.Caption := 'Usuário e Senha';
  frmConfigUserAndPassword.Height := 270;
  frmConfigUserAndPassword.Center();

  labelDescricao := TLabel.Create(frmConfigUserAndPassword);
  labelDescricao.Parent := frmConfigUserAndPassword;
  labelDescricao.Top := 8;
  labelDescricao.Left := 8;
  labelDescricao.AutoSize := False;
  labelDescricao.Width := frmConfigUserAndPassword.ClientWidth - 16;
  labelDescricao.Height := 35;
  labelDescricao.WordWrap := True;
  labelDescricao.Caption := 'Informe o usuário e senha, essas informações serão utilizadas posteriormente para realizar configurações do sistema!';

  labelUsuario := TLabel.Create(frmConfigUserAndPassword);
  labelUsuario.Parent := frmConfigUserAndPassword;
  labelUsuario.Top := labelDescricao.Top + labelDescricao.Height + 8;
  labelUsuario.Left := 8;
  labelUsuario.Caption := 'Usuário';

  editUsuario := TEdit.Create(frmConfigUserAndPassword);
  editUsuario.Parent := frmConfigUserAndPassword;
  editUsuario.Name := 'edtUsuario';
  editUsuario.Top := labelUsuario.Top + labelUsuario.Height + 4;
  editUsuario.Left := 8;
  editUsuario.Width := frmConfigUserAndPassword.ClientWidth - 16;
  editUsuario.Clear();

  labelSenha := TLabel.Create(frmConfigUserAndPassword);
  labelSenha.Parent := frmConfigUserAndPassword;
  labelSenha.Top := editUsuario.Top + editUsuario.Height + 8;
  labelSenha.Left := 8;
  labelSenha.Caption := 'Senha';

  editSenha := TPasswordEdit.Create(frmConfigUserAndPassword);
  editSenha.Parent := frmConfigUserAndPassword;
  editSenha.Name := 'edtSenha';
  editSenha.Top := labelSenha.Top + labelSenha.Height + 4;
  editSenha.Left := 8;
  editSenha.Width := frmConfigUserAndPassword.ClientWidth - 16;
  editSenha.Clear();

  labelConfirmacaoSenha := TLabel.Create(frmConfigUserAndPassword);
  labelConfirmacaoSenha.Parent := frmConfigUserAndPassword;
  labelConfirmacaoSenha.Top := editSenha.Top + editSenha.Height + 8;
  labelConfirmacaoSenha.Left := 8;
  labelConfirmacaoSenha.Caption := 'Confirmar Senha';

  editConfirmacaoSenha := TPasswordEdit.Create(frmConfigUserAndPassword);
  editConfirmacaoSenha.Parent := frmConfigUserAndPassword;
  editConfirmacaoSenha.Name := 'edtConfirmacaoSenha';
  editConfirmacaoSenha.Top := labelConfirmacaoSenha.Top + labelConfirmacaoSenha.Height + 4;
  editConfirmacaoSenha.Left := 8;
  editConfirmacaoSenha.Width := frmConfigUserAndPassword.ClientWidth - 16;
  editConfirmacaoSenha.Clear();

  buttonOk := TButton.Create(frmConfigUserAndPassword);
  buttonOk.Parent := frmConfigUserAndPassword;
  buttonOk.Top := frmConfigUserAndPassword.ClientHeight - (buttonOk.Height + 8); 
  buttonOk.Left := frmConfigUserAndPassword.ClientWidth - (buttonOk.Width + 8); 
  buttonOk.Caption := 'Ok';
  buttonOk.OnClick := @buttonOkClick;

  if (userAndPasswordDefined) then
  begin
    editUsuario.Text := usuario;
    editSenha.Text := senha;
    editConfirmacaoSenha.Text := senha;
  end;

  userAndPasswordDefined := False;
  frmConfigUserAndPassword.ShowModal();
end;

procedure InstallNetFramework;
var
  StatusText: String;
  ResultCode: Integer;
begin
  StatusText := WizardForm.StatusLabel.Caption;
  WizardForm.StatusLabel.Caption := 'Instalando .NET Framework 4.6.1...';
  WizardForm.ProgressGauge.Style := npbstMarquee;
  try
    if not Exec(ExpandConstant('{tmp}\netframework_4_6_1.exe'), '/q /norestart /passive /showrmui /showfinalerror', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      MsgBox('Não foi possível instalar o .NET Framework 4.6.1' + #10 + 'Erro: ' + IntToStr(ResultCode) + '', mbError, MB_OK);
      successfullyInstalled := False;
      WizardForm.Close;
    end;
  finally
    WizardForm.StatusLabel.Caption := StatusText;
    WizardForm.ProgressGauge.Style := npbstNormal;
  end;
end;

function NetFrameworkIsInstalled(version: string; service: cardinal): Boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1'          .NET Framework 1.1
//    'v2.0'          .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//    'v4.5.1'        .NET Framework 4.5.1
//    'v4.5.2'        .NET Framework 4.5.2
//    'v4.6'          .NET Framework 4.6
//    'v4.6.1'        .NET Framework 4.6.1
//    'v4.6.2'        .NET Framework 4.6.2
//    'v4.7'          .NET Framework 4.7
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key, versionKey: string;
    install, release, serviceCount, versionRelease: cardinal;
    success: boolean;
begin
    versionKey := version;
    versionRelease := 0;

    // .NET 1.1 and 2.0 embed release number in version key
    if (version = 'v1.1') then
      versionKey := 'v1.1.4322'
    else if (version = 'v2.0') then
        versionKey := 'v2.0.50727'
    // .NET 4.5 and newer install as update to .NET 4.0 Full
    else if (Pos('v4.', version) = 1) then
    begin
      versionKey := 'v4\Full';
      case version of
        'v4.5':   versionRelease := 378389;
        'v4.5.1': versionRelease := 378675; // 378758 on Windows 8 and older
        'v4.5.2': versionRelease := 379893;
        'v4.6':   versionRelease := 393295; // 393297 on Windows 8.1 and older
        'v4.6.1': versionRelease := 394254; // 394271 before Win10 November Update
        'v4.6.2': versionRelease := 394802; // 394806 before Win10 Anniversary Update
        'v4.7':   versionRelease := 460798; // 460805 before Win10 Creators Update
      end;
    end;

    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + versionKey;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if (Pos('v3.0', version) = 1) then
      success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install)
    else
      success := RegQueryDWordValue(HKLM, key, 'Install', install);

    // .NET 4.0 and newer use value Servicing instead of SP
    if (Pos('v4', version) = 1) then
      success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount)
    else
      success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);

    // .NET 4.5 and newer use additional value Release
    if versionRelease > 0 then
    begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= versionRelease);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;

function NetFrameworkIsNotInstalled: Boolean;
begin
  Result := not NetFrameworkIsInstalled('v4.6.1', 0);
end;

function InitializeSetup(): Boolean;
begin
  successfullyInstalled := True;

  Result := True;
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
  Result := '';

  if not userAndPasswordDefined then
    Result := 'Não é possível prosseguir com a instalação!';
end;

procedure CancelButtonClick(CurPageID: Integer; var Cancel, Confirm: Boolean);
begin
  if (CurPageID = wpInstalling) then
    Confirm := successfullyInstalled;
end;

procedure CurPageChanged(PageID: Integer);
begin
  case (PageID) of
    wpPreparing:
    begin
      if (PageId <> beforePage) then
        ShowConfigUserAndPassword();
     end;
  end;

  beforePage := PageId;
end;